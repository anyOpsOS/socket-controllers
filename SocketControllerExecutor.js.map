{"version":3,"sources":["../../src/SocketControllerExecutor.ts"],"names":[],"mappings":"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","file":"SocketControllerExecutor.js","sourcesContent":["import {MetadataBuilder} from \"./metadata-builder/MetadataBuilder\";\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\nimport {classToPlain, ClassTransformOptions, plainToClass} from \"class-transformer\";\nimport {ActionTypes} from \"./metadata/types/ActionTypes\";\nimport {ParamMetadata} from \"./metadata/ParamMetadata\";\nimport {ParameterParseJsonError} from \"./error/ParameterParseJsonError\";\nimport {ParamTypes} from \"./metadata/types/ParamTypes\";\nimport {ControllerMetadata} from \"./metadata/ControllerMetadata\";\nimport * as pathToRegexp from \"path-to-regexp\";\nimport {CurrentUserChecker} from \"./CurrentUserChecker\";\nimport {SocketControllersOptions} from \"./SocketControllersOptions\";\n\n/**\n * Registers controllers and actions in the given server framework.\n */\nexport class SocketControllerExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if class-transformer package should be used to perform message body serialization / deserialization.\n     * By default its enabled.\n     */\n    useClassTransformer: boolean;\n\n    /**\n     * Global class transformer options passed to class-transformer during classToPlain operation.\n     * This operation is being executed when server returns response to user.\n     */\n    classToPlainTransformOptions: ClassTransformOptions;\n\n    /**\n     * Global class transformer options passed to class-transformer during plainToClass operation.\n     * This operation is being executed when parsing user parameters.\n     */\n    plainToClassTransformOptions: ClassTransformOptions;\n\n    /**\n     * Special function used to get currently authorized user.\n     */\n    currentUserChecker: CurrentUserChecker;\n\n    /**\n     * Specified socket.io instance\n     */\n    io: any;\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private metadataBuilder: MetadataBuilder;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    init(io: any, options: SocketControllersOptions) {\n        this.io = io;\n        this.metadataBuilder = new MetadataBuilder();\n\n        if (options.useClassTransformer !== undefined) {\n            this.useClassTransformer = options.useClassTransformer;\n        } else {\n            this.useClassTransformer = true;\n        }\n\n        this.classToPlainTransformOptions = options.classToPlainTransformOptions;\n        this.plainToClassTransformOptions = options.plainToClassTransformOptions;\n        this.currentUserChecker = options.currentUserChecker;\n        return this;\n    }\n\n    execute(controllerClasses?: Function[], middlewareClasses?: Function[]) {\n        this.registerControllers(controllerClasses);\n        this.registerMiddlewares(middlewareClasses);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Registers middlewares.\n     */\n    private registerMiddlewares(classes?: Function[]): this {\n        const middlewares = this.metadataBuilder.buildMiddlewareMetadata(classes);\n\n        middlewares\n            .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\n            .forEach(middleware => {\n                this.io.use((socket: any, next: (err?: any) => any) => {\n                    middleware.instance.use(socket, next);\n                });\n            });\n\n        return this;\n    }\n\n    /**\n     * Registers controllers.\n     */\n    private registerControllers(classes?: Function[]): this {\n        const controllers = this.metadataBuilder.buildControllerMetadata(classes);\n        const controllersWithoutNamespaces = controllers.filter(ctrl => !ctrl.namespace);\n        const controllersWithNamespaces = controllers.filter(ctrl => !!ctrl.namespace);\n\n        // register controllers without namespaces\n        this.io.on(\"connection\", (socket: any) => this.handleConnection(controllersWithoutNamespaces, socket));\n\n        // register controllers with namespaces\n        controllersWithNamespaces.forEach(controller => {\n            let namespace: string | RegExp = controller.namespace;\n            if (!(namespace instanceof RegExp)) {\n                namespace = pathToRegexp(namespace);\n            }\n            this.io.of(namespace).on(\"connection\", (socket: any) => this.handleConnection([controller], socket));\n        });\n\n        return this;\n    }\n\n    private handleConnection(controllers: ControllerMetadata[], socket: any) {\n        controllers.forEach(controller => {\n            controller.uses.forEach(middleware => {\n                socket.use((pocket: any, next: (err?: any) => any) => {\n                    middleware.instance.use(pocket, next); // TODO: pass socket instance?\n                });\n            });\n            controller.actions.forEach(action => {\n                if (action.type === ActionTypes.CONNECT) {\n                    this.handleAction(action, {socket: socket})\n                        .then(result => this.handleSuccessResult(result, action, socket))\n                        .catch(error => this.handleFailResult(error, action, socket));\n\n                } else if (action.type === ActionTypes.DISCONNECT) {\n                    socket.on(\"disconnect\", () => {\n                        this.handleAction(action, {socket: socket})\n                            .then(result => this.handleSuccessResult(result, action, socket))\n                            .catch(error => this.handleFailResult(error, action, socket));\n                    });\n\n                } else if (action.type === ActionTypes.MESSAGE) {\n                    socket.on(action.name, (data: any, callback: (...args: any[]) => void) => { // todo get multiple args\n                        this.handleAction(action, {socket: socket, data: data})\n                            .then(result => this.handleSuccessResult(result, action, socket, callback))\n                            .catch(error => this.handleFailResult(error, action, socket, callback));\n                    });\n                }\n            });\n        });\n    }\n\n    private handleAction(action: ActionMetadata, options: {socket?: any, data?: any}): Promise<any> {\n\n        // compute all parameters\n        const paramsPromises = action.params\n            .sort((param1, param2) => param1.index - param2.index)\n            .map(param => {\n                if (param.type === ParamTypes.CONNECTED_SOCKET) {\n                    return options.socket;\n\n                } else if (param.type === ParamTypes.SOCKET_IO) {\n                    return this.io;\n\n                } else if (param.type === ParamTypes.SOCKET_QUERY_PARAM) {\n                    return options.socket.handshake.query[param.value];\n\n                } else if (param.type === ParamTypes.SOCKET_SESSION_PARAM) {\n                    return options.socket.request.session[param.value];\n\n                } else if (param.type === ParamTypes.SOCKET_ID) {\n                    return options.socket.id;\n\n                } else if (param.type === ParamTypes.SOCKET_REQUEST) {\n                    return options.socket.request;\n\n                } else if (param.type === ParamTypes.SOCKET_ROOMS) {\n                    return options.socket.rooms;\n\n                } else if (param.type === ParamTypes.NAMESPACE_PARAMS) {\n                    return this.handleNamespaceParams(options.socket, action, param);\n\n                } else if (param.type === ParamTypes.NAMESPACE_PARAM) {\n                    const params: any[] = this.handleNamespaceParams(options.socket, action, param);\n                    return params[param.value];\n\n                } else if (param.type === ParamTypes.CURRENT_USER) {\n                    return this.currentUserChecker(options.socket);\n\n                } else {\n                    return this.handleParam(param, options);\n                }\n            });\n\n        // after all parameters are computed\n        const paramsPromise = Promise.all(paramsPromises).catch(error => {\n            console.log(\"Error during computation params of the socket controller: \", error);\n            throw error;\n        });\n        return paramsPromise.then(params => {\n            return action.executeAction(params);\n        });\n    }\n\n    private handleParam(param: ParamMetadata, options: {socket?: any, data?: any}) {\n\n        let value = options.data;\n        if (value !== null && value !== undefined && value !== \"\")\n            value = this.handleParamFormat(value, param);\n\n        // if transform function is given for this param then apply it\n        if (param.transform)\n            value = param.transform(value, options.socket);\n\n        return value;\n    }\n\n    private handleParamFormat(value: any, param: ParamMetadata): any {\n        const format = param.reflectedType;\n        const formatName = format instanceof Function && format.name ? format.name : format instanceof String ? format : \"\";\n        switch (formatName.toLowerCase()) {\n            case \"number\":\n                return +value;\n\n            case \"string\":\n                return value;\n\n            case \"boolean\":\n                if (value === \"true\") {\n                    return true;\n\n                } else if (value === \"false\") {\n                    return false;\n                }\n                return !!value;\n\n            default:\n                const isObjectFormat = format instanceof Function || formatName.toLowerCase() === \"object\";\n                if (value && isObjectFormat)\n                    value = this.parseParamValue(value, param);\n        }\n        return value;\n    }\n\n    private parseParamValue(value: any, paramMetadata: ParamMetadata) {\n        try {\n            const parseValue = typeof value === \"string\" ? JSON.parse(value) : value;\n            if (paramMetadata.reflectedType !== Object && paramMetadata.reflectedType && this.useClassTransformer) {\n                const options = paramMetadata.classTransformOptions || this.plainToClassTransformOptions;\n                return plainToClass(paramMetadata.reflectedType, parseValue, options);\n            } else {\n                return parseValue;\n            }\n        } catch (er) {\n            throw new ParameterParseJsonError(value);\n        }\n    }\n\n    private handleSuccessResult(result: any, action: ActionMetadata, socket: any, ackCallback?: (...args: any[]) => void) {\n        if (result !== null && result !== undefined && action.returnAck && ackCallback instanceof Function) {\n            ackCallback(result);\n        } else if ((result === null || result === undefined) && action.emitOnSuccess && !action.skipEmitOnEmptyResult) {\n            ackCallback(action.emitOnSuccess.value);\n        }\n\n        if (result !== null && result !== undefined && action.emitOnSuccess) {\n            const transformOptions = action.emitOnSuccess.classTransformOptions || this.classToPlainTransformOptions;\n            let transformedResult = this.useClassTransformer && result instanceof Object ? classToPlain(result, transformOptions) : result;\n            socket.emit(action.emitOnSuccess.value, transformedResult);\n\n        } else if ((result === null || result === undefined) && action.emitOnSuccess && !action.skipEmitOnEmptyResult) {\n            socket.emit(action.emitOnSuccess.value);\n        }\n    }\n\n    private handleFailResult(result: any, action: ActionMetadata, socket: any, ackCallback?: (...args: any[]) => void) {\n        if (result !== null && result !== undefined && action.returnAck && ackCallback instanceof Function) {\n            ackCallback(result);\n        } else if ((result === null || result === undefined) && action.emitOnFail && !action.skipEmitOnEmptyResult) {\n            ackCallback(action.emitOnFail.value);\n        }\n\n        if (result !== null && result !== undefined && action.emitOnFail) {\n            const transformOptions = action.emitOnSuccess.classTransformOptions || this.classToPlainTransformOptions;\n            let transformedResult = this.useClassTransformer && result instanceof Object ? classToPlain(result, transformOptions) : result;\n            if (result instanceof Error && !Object.keys(transformedResult).length) {\n                transformedResult = result.toString();\n            }\n            socket.emit(action.emitOnFail.value, transformedResult);\n\n        } else if ((result === null || result === undefined) && action.emitOnFail && !action.skipEmitOnEmptyResult) {\n            socket.emit(action.emitOnFail.value);\n        }\n    }\n\n    private handleNamespaceParams(socket: any, action: ActionMetadata, param: ParamMetadata): any[] {\n        const keys: any[] = [];\n        const regexp = pathToRegexp(action.controllerMetadata.namespace, keys);\n        const parts: any[] = regexp.exec(socket.nsp.name);\n        const params: any[] = [];\n        keys.forEach((key: any, index: number) => {\n            params[key.name] = this.handleParamFormat(parts[index + 1], param);\n        });\n        return params;\n    }\n\n}\n"],"sourceRoot":"."}
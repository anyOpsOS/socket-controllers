{"version":3,"sources":["../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":";;AAKA,mDAAgD;AAEhD;IA0CI,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,wBAAY,kBAAsC,EAAE,IAAwB;QACxE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,sCAAa,GAAb,UAAc,MAAa;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IAMD,sBAAI,yCAAa;QAJjB,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;aAE5E;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,eAAe,EAAlD,CAAkD,CAAC,CAAC;QAClG,CAAC;;;OAAA;IAED,sBAAI,sCAAU;aAAd;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,YAAY,EAA/C,CAA+C,CAAC,CAAC;QAC/F,CAAC;;;OAAA;IAED,sBAAI,iDAAqB;aAAzB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,yBAAyB,EAA5D,CAA4D,CAAC,CAAC;QAC5G,CAAC;;;OAAA;IAED,sBAAI,qCAAS;aAAb;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,UAAU,EAA7C,CAA6C,CAAC,CAAC;QAC7F,CAAC;;;OAAA;IAEL,qBAAC;AAAD,CAlFA,AAkFC,IAAA;AAlFY,wCAAc","file":"ActionMetadata.js","sourcesContent":["import {ParamMetadata} from \"./ParamMetadata\";\r\nimport {ActionMetadataArgs} from \"./args/ActionMetadataArgs\";\r\nimport {ActionType} from \"./types/ActionTypes\";\r\nimport {ControllerMetadata} from \"./ControllerMetadata\";\r\nimport {ResultMetadata} from \"./ResultMetadata\";\r\nimport {ResultTypes} from \"./types/ResultTypes\";\r\n\r\nexport class ActionMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Action's controller.\r\n     */\r\n    controllerMetadata: ControllerMetadata;\r\n\r\n    /**\r\n     * Action's parameters.\r\n     */\r\n    params: ParamMetadata[];\r\n\r\n    /**\r\n     * Action's result handlers.\r\n     */\r\n    results: ResultMetadata[];\r\n\r\n    /**\r\n     * Message name served by this action.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Class on which's method this action is attached.\r\n     */\r\n    target: Function;\r\n\r\n    /**\r\n     * Object's method that will be executed on this action.\r\n     */\r\n    method: string;\r\n\r\n    /**\r\n     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\r\n     * class.\r\n     */\r\n    type: ActionType;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n    \r\n    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs) {\r\n        this.controllerMetadata = controllerMetadata;\r\n        this.name = args.name;\r\n        this.target = args.target;\r\n        this.method = args.method;\r\n        this.type = args.type;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    executeAction(params: any[]) {\r\n        return this.controllerMetadata.instance[this.method].apply(this.controllerMetadata.instance, params);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    get emitOnSuccess() {\r\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.EMIT_ON_SUCCESS);\r\n    }\r\n\r\n    get emitOnFail() {\r\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.EMIT_ON_FAIL);\r\n    }\r\n\r\n    get skipEmitOnEmptyResult() {\r\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.SKIP_EMIT_ON_EMPTY_RESULT);\r\n    }\r\n\r\n    get returnAck() {\r\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.RETURN_ACK);\r\n    }\r\n\r\n}"],"sourceRoot":".."}
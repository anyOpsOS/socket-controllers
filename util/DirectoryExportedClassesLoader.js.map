{"version":3,"sources":["../../src/util/DirectoryExportedClassesLoader.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAE7B;;GAEG;AACI,KAAK,uCAAuC,WAAqB,EAAE,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;IAE9F,MAAM,eAAe,GAAG,UAAU,QAAa,EAAE,SAAqB;QAClE,IAAI,QAAQ,YAAY,QAAQ,EAAE;YAC9B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAE5B;aAAM,IAAI,QAAQ,YAAY,MAAM,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SAEnF;aAAM,IAAI,QAAQ,YAAY,KAAK,EAAE;YAClC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SAC/D;QAED,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QAEjD,+BAA+B;QAC/B,MAAM,IAAI,GAAa,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAEtG,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC,EAAE,EAAc,CAAC,CAAC;IAEnB,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ;SAClC,MAAM,CAAC,IAAI,CAAC,EAAE;QACX,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;IAClF,CAAC,CAAC;SACD,GAAG,CAAC,IAAI,CAAC,EAAE;QACR,wBAAwB;QACxB,4CAAc,IAAI,GAAE;IACxB,CAAC,CAAC,CAAC,CAAC;IAER,OAAO,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrC,CAAC;AAnCD,oEAmCC","file":"DirectoryExportedClassesLoader.js","sourcesContent":["import * as path from \"path\";\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport async function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Promise<Function[]> {\n\n    const loadFileClasses = function (exported: any, allLoaded: Function[]) {\n        if (exported instanceof Function) {\n            allLoaded.push(exported);\n\n        } else if (exported instanceof Object) {\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n\n        } else if (exported instanceof Array) {\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n        }\n\n        return allLoaded;\n    };\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n\n        // Do not glob Network requests\n        const glob: string[] = dir.startsWith(\"https://\") ? [dir] : require(\"glob\").sync(path.normalize(dir));\n\n        return allDirs.concat(glob);\n    }, [] as string[]);\n\n    const dirs = await Promise.all(allFiles\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n            return formats.indexOf(path.extname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => {\n            // return require(file);\n            return import(file);\n        }));\n\n    return loadFileClasses(dirs, []);\n}"],"sourceRoot":".."}
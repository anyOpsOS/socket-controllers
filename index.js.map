{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;AAAA,gFAA2E;AAC3E,0FAAmF;AACnF,yEAAoE;AAEpE,2CAA6C;AAE7C,4EAA4E;AAC5E,iBAAiB;AACjB,4EAA4E;AAE5E;;GAEG;AACI,KAAK,0BAA6B,EAAK,EAAE,OAAkC;IAC9E,MAAM,cAAc,CAAC,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;IACxC,OAAO,EAAE,CAAC;AACd,CAAC;AAHD,0CAGC;AAED;;GAEG;AACI,KAAK,6BAA6B,IAAY,EAAE,OAAkC;IACrF,MAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,cAAc,CAAC,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;IACxC,OAAO,EAAE,CAAC;AACd,CAAC;AAJD,gDAIC;AAED;;GAEG;AACH;IACI,OAAO,iBAAiB,EAAE,CAAC,EAAE,CAAC;AAClC,CAAC;AAFD,kCAEC;AAED;;GAEG;AACH;IACI,OAAO,4BAAgB,CAAC,mDAAwB,CAAC,CAAC;AACtD,CAAC;AAED;;GAEG;AACH,KAAK,yBAAyB,EAAO,EAAE,OAAiC;IAEpE,mEAAmE;IACnE,IAAI,iBAA6B,CAAC;IAClC,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM;QAC5D,iBAAiB,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,YAAY,QAAQ,CAAC,CAAC;IAC5G,MAAM,cAAc,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC;IAC3G,iBAAiB,CAAC,IAAI,CAAC,GAAG,MAAM,6DAA4B,CAAC,cAAc,CAAC,CAAC,CAAC;IAE9E,IAAI,iBAA6B,CAAC;IAClC,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE;QAC9D,iBAAiB,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,YAAY,QAAQ,CAAC,CAAC;QACxG,MAAM,cAAc,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC;QAC3G,iBAAiB,CAAC,IAAI,CAAC,GAAG,MAAM,6DAA4B,CAAC,cAAc,CAAC,CAAC,CAAC;KACjF;IAED,sDAAsD;IACtD,iBAAiB,EAAE;SACd,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC;SACjB,OAAO,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;AACvD,CAAC;AAED,4EAA4E;AAC5E,0BAA0B;AAC1B,4EAA4E;AAE5E;;GAEG;AACH;IACI,IAAI,CAAE,MAAc,CAAC,oCAAoC;QACpD,MAAc,CAAC,oCAAoC,GAAG,IAAI,yCAAmB,EAAE,CAAC;IAErF,OAAQ,MAAc,CAAC,oCAAoC,CAAC;AAChE,CAAC;AALD,gEAKC;AAED,4EAA4E;AAC5E,wBAAwB;AACxB,4EAA4E;AAE5E,iCAA4B;AAI5B,aAAa;AACb,kDAA6C;AAC7C,0CAAqC;AACrC,0CAAqC;AACrC,+CAA0C;AAC1C,6CAAwC;AACxC,kDAA6C;AAC7C,oDAA+C;AAC/C,iDAA4C;AAC5C,2CAAsC;AACtC,8CAAyC;AACzC,2CAAsC;AACtC,+CAA0C;AAC1C,4CAAuC;AACvC,uDAAkD;AAClD,2CAAsC;AACtC,4CAAuC;AACvC,6CAAwC;AACxC,2CAAsC;AACtC,0CAAqC","file":"index.js","sourcesContent":["import {MetadataArgsStorage} from \"./metadata-builder/MetadataArgsStorage\";\nimport {importClassesFromDirectories} from \"./util/DirectoryExportedClassesLoader\";\nimport {SocketControllerExecutor} from \"./SocketControllerExecutor\";\nimport {SocketControllersOptions} from \"./SocketControllersOptions\";\nimport {getFromContainer} from \"./container\";\n\n// -------------------------------------------------------------------------\n// Main Functions\n// -------------------------------------------------------------------------\n\n/**\n * Registers all loaded actions in your express application.\n */\nexport async function useSocketServer<T>(io: T, options?: SocketControllersOptions): Promise<T> {\n    await createExecutor(io, options || {});\n    return io;\n}\n\n/**\n * Registers all loaded actions in your express application.\n */\nexport async function createSocketServer(port: number, options?: SocketControllersOptions): Promise<any> {\n    const io = require(\"socket.io\")(port);\n    await createExecutor(io, options || {});\n    return io;\n}\n\n/**\n * Gets socket.io instance\n */\nexport function getSocketIO() {\n    return getSocketExecutor().io;\n}\n\n/**\n * Get socket executor\n */\nfunction getSocketExecutor() {\n    return getFromContainer(SocketControllerExecutor);\n}\n\n/**\n * Registers all loaded actions in your express application.\n */\nasync function createExecutor(io: any, options: SocketControllersOptions): Promise<void> {\n\n    // second import all controllers and middlewares and error handlers\n    let controllerClasses: Function[];\n    if (options && options.controllers && options.controllers.length)\n        controllerClasses = (options.controllers as any[]).filter(controller => controller instanceof Function);\n    const controllerDirs = (options.controllers as any[]).filter(controller => typeof controller === \"string\");\n    controllerClasses.push(...await importClassesFromDirectories(controllerDirs));\n\n    let middlewareClasses: Function[];\n    if (options && options.middlewares && options.middlewares.length) {\n        middlewareClasses = (options.middlewares as any[]).filter(controller => controller instanceof Function);\n        const middlewareDirs = (options.middlewares as any[]).filter(controller => typeof controller === \"string\");\n        middlewareClasses.push(...await importClassesFromDirectories(middlewareDirs));\n    }\n\n    // run socket controller register and other operations\n    getSocketExecutor()\n        .init(io, options)\n        .execute(controllerClasses, middlewareClasses);\n}\n\n// -------------------------------------------------------------------------\n// Global Metadata Storage\n// -------------------------------------------------------------------------\n\n/**\n * Gets the metadata arguments storage.\n */\nexport function defaultMetadataArgsStorage(): MetadataArgsStorage {\n    if (!(global as any).socketControllersMetadataArgsStorage)\n        (global as any).socketControllersMetadataArgsStorage = new MetadataArgsStorage();\n\n    return (global as any).socketControllersMetadataArgsStorage;\n}\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./SocketControllersOptions\";\nexport * from \"./MiddlewareInterface\";\n\n// decorators\nexport * from \"./decorator/SocketController\";\nexport * from \"./decorator/SocketIO\";\nexport * from \"./decorator/SocketId\";\nexport * from \"./decorator/SocketRequest\";\nexport * from \"./decorator/SocketRooms\";\nexport * from \"./decorator/SocketQueryParam\";\nexport * from \"./decorator/SocketSessionParam\";\nexport * from \"./decorator/ConnectedSocket\";\nexport * from \"./decorator/OnConnect\";\nexport * from \"./decorator/OnDisconnect\";\nexport * from \"./decorator/OnMessage\";\nexport * from \"./decorator/EmitOnSuccess\";\nexport * from \"./decorator/EmitOnFail\";\nexport * from \"./decorator/SkipEmitOnEmptyResult\";\nexport * from \"./decorator/ReturnAck\";\nexport * from \"./decorator/Middleware\";\nexport * from \"./decorator/MessageBody\";\nexport * from \"./decorator/NspParams\";\nexport * from \"./decorator/NspParam\";\n"],"sourceRoot":"."}
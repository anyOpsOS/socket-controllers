{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;AAAA,8EAA2E;AAC3E,wFAAmF;AACnF,uEAAoE;AAEpE,yCAA6C;AAE7C,4EAA4E;AAC5E,iBAAiB;AACjB,4EAA4E;AAE5E;;GAEG;AACH,yBAAmC,EAAK,EAAE,OAAkC;IACxE,cAAc,CAAC,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;IAClC,OAAO,EAAE,CAAC;AACd,CAAC;AAHD,0CAGC;AAED;;GAEG;AACH,4BAAmC,IAAY,EAAE,OAAkC;IAC/E,IAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,cAAc,CAAC,EAAE,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;IAClC,OAAO,EAAE,CAAC;AACd,CAAC;AAJD,gDAIC;AAED;;GAEG;AACH;IACI,OAAO,iBAAiB,EAAE,CAAC,EAAE,CAAC;AAClC,CAAC;AAFD,kCAEC;AAED;;GAEG;AACH;IACI,OAAO,4BAAgB,CAAC,mDAAwB,CAAC,CAAC;AACtD,CAAC;AAED;;GAEG;AACH,wBAAwB,EAAO,EAAE,OAAiC;IAE9D,mEAAmE;IACnE,IAAI,iBAA6B,CAAC;IAClC,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM;QAC5D,iBAAiB,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,YAAY,QAAQ,EAA9B,CAA8B,CAAC,CAAC;IAC5G,IAAM,cAAc,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,OAAO,UAAU,KAAK,QAAQ,EAA9B,CAA8B,CAAC,CAAC;IAC3G,iBAAiB,CAAC,IAAI,OAAtB,iBAAiB,EAAS,6DAA4B,CAAC,cAAc,CAAC,EAAE;IAExE,IAAI,iBAA6B,CAAC;IAClC,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE;QAC9D,iBAAiB,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,YAAY,QAAQ,EAA9B,CAA8B,CAAC,CAAC;QACxG,IAAM,cAAc,GAAI,OAAO,CAAC,WAAqB,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,OAAO,UAAU,KAAK,QAAQ,EAA9B,CAA8B,CAAC,CAAC;QAC3G,iBAAiB,CAAC,IAAI,OAAtB,iBAAiB,EAAS,6DAA4B,CAAC,cAAc,CAAC,EAAE;KAC3E;IAED,sDAAsD;IACtD,iBAAiB,EAAE;SACd,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC;SACjB,OAAO,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;AACvD,CAAC;AAED,4EAA4E;AAC5E,0BAA0B;AAC1B,4EAA4E;AAE5E;;GAEG;AACH;IACI,IAAI,CAAE,MAAc,CAAC,oCAAoC;QACpD,MAAc,CAAC,oCAAoC,GAAG,IAAI,yCAAmB,EAAE,CAAC;IAErF,OAAQ,MAAc,CAAC,oCAAoC,CAAC;AAChE,CAAC;AALD,gEAKC;AAED,4EAA4E;AAC5E,wBAAwB;AACxB,4EAA4E;AAE5E,iCAA4B;AAI5B,aAAa;AACb,kDAA6C;AAC7C,0CAAqC;AACrC,0CAAqC;AACrC,+CAA0C;AAC1C,6CAAwC;AACxC,kDAA6C;AAC7C,oDAA+C;AAC/C,iDAA4C;AAC5C,2CAAsC;AACtC,8CAAyC;AACzC,2CAAsC;AACtC,+CAA0C;AAC1C,4CAAuC;AACvC,uDAAkD;AAClD,2CAAsC;AACtC,4CAAuC;AACvC,6CAAwC;AACxC,2CAAsC;AACtC,0CAAqC","file":"index.js","sourcesContent":["import {MetadataArgsStorage} from \"./metadata-builder/MetadataArgsStorage\";\r\nimport {importClassesFromDirectories} from \"./util/DirectoryExportedClassesLoader\";\r\nimport {SocketControllerExecutor} from \"./SocketControllerExecutor\";\r\nimport {SocketControllersOptions} from \"./SocketControllersOptions\";\r\nimport {getFromContainer} from \"./container\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Main Functions\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Registers all loaded actions in your express application.\r\n */\r\nexport function useSocketServer<T>(io: T, options?: SocketControllersOptions): T {\r\n    createExecutor(io, options || {});\r\n    return io;\r\n}\r\n\r\n/**\r\n * Registers all loaded actions in your express application.\r\n */\r\nexport function createSocketServer(port: number, options?: SocketControllersOptions): any {\r\n    const io = require(\"socket.io\")(port);\r\n    createExecutor(io, options || {});\r\n    return io;\r\n}\r\n\r\n/**\r\n * Gets socket.io instance\r\n */\r\nexport function getSocketIO() {\r\n    return getSocketExecutor().io;\r\n}\r\n\r\n/**\r\n * Get socket executor\r\n */\r\nfunction getSocketExecutor() {\r\n    return getFromContainer(SocketControllerExecutor);\r\n}\r\n\r\n/**\r\n * Registers all loaded actions in your express application.\r\n */\r\nfunction createExecutor(io: any, options: SocketControllersOptions): void {\r\n\r\n    // second import all controllers and middlewares and error handlers\r\n    let controllerClasses: Function[];\r\n    if (options && options.controllers && options.controllers.length)\r\n        controllerClasses = (options.controllers as any[]).filter(controller => controller instanceof Function);\r\n    const controllerDirs = (options.controllers as any[]).filter(controller => typeof controller === \"string\");\r\n    controllerClasses.push(...importClassesFromDirectories(controllerDirs));\r\n\r\n    let middlewareClasses: Function[];\r\n    if (options && options.middlewares && options.middlewares.length) {\r\n        middlewareClasses = (options.middlewares as any[]).filter(controller => controller instanceof Function);\r\n        const middlewareDirs = (options.middlewares as any[]).filter(controller => typeof controller === \"string\");\r\n        middlewareClasses.push(...importClassesFromDirectories(middlewareDirs));\r\n    }\r\n\r\n    // run socket controller register and other operations\r\n    getSocketExecutor()\r\n        .init(io, options)\r\n        .execute(controllerClasses, middlewareClasses);\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Global Metadata Storage\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Gets the metadata arguments storage.\r\n */\r\nexport function defaultMetadataArgsStorage(): MetadataArgsStorage {\r\n    if (!(global as any).socketControllersMetadataArgsStorage)\r\n        (global as any).socketControllersMetadataArgsStorage = new MetadataArgsStorage();\r\n\r\n    return (global as any).socketControllersMetadataArgsStorage;\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly Used exports\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from \"./container\";\r\nexport * from \"./SocketControllersOptions\";\r\nexport * from \"./MiddlewareInterface\";\r\n\r\n// decorators\r\nexport * from \"./decorator/SocketController\";\r\nexport * from \"./decorator/SocketIO\";\r\nexport * from \"./decorator/SocketId\";\r\nexport * from \"./decorator/SocketRequest\";\r\nexport * from \"./decorator/SocketRooms\";\r\nexport * from \"./decorator/SocketQueryParam\";\r\nexport * from \"./decorator/SocketSessionParam\";\r\nexport * from \"./decorator/ConnectedSocket\";\r\nexport * from \"./decorator/OnConnect\";\r\nexport * from \"./decorator/OnDisconnect\";\r\nexport * from \"./decorator/OnMessage\";\r\nexport * from \"./decorator/EmitOnSuccess\";\r\nexport * from \"./decorator/EmitOnFail\";\r\nexport * from \"./decorator/SkipEmitOnEmptyResult\";\r\nexport * from \"./decorator/ReturnAck\";\r\nexport * from \"./decorator/Middleware\";\r\nexport * from \"./decorator/MessageBody\";\r\nexport * from \"./decorator/NspParams\";\r\nexport * from \"./decorator/NspParam\";\r\n"],"sourceRoot":"."}
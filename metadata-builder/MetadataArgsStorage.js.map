{"version":3,"sources":["../../src/metadata-builder/MetadataArgsStorage.ts"],"names":[],"mappings":";;AAOA;;GAEG;AACH;IAAA;QAEI,4EAA4E;QAC5E,aAAa;QACb,4EAA4E;QAE5E,gBAAW,GAAmC,EAAE,CAAC;QACjD,gBAAW,GAA6B,EAAE,CAAC;QAC3C,SAAI,GAAsB,EAAE,CAAC;QAC7B,YAAO,GAAyB,EAAE,CAAC;QACnC,YAAO,GAAyB,EAAE,CAAC;QACnC,WAAM,GAAwB,EAAE,CAAC;IAkDrC,CAAC;IAhDG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,+DAAiC,GAAjC,UAAkC,OAAmB;QACjD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI;YAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,GAAG,EAAnB,CAAmB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+DAAiC,GAAjC,UAAkC,OAAmB;QACjD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;YACrC,OAAO,OAAO,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,MAAM,KAAK,GAAG,EAAzB,CAAyB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mDAAqB,GAArB,UAAsB,MAAgB;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,MAAM,EAAxB,CAAwB,CAAC,CAAC;IACnE,CAAC;IAED,kDAAoB,GAApB,UAAqB,MAAgB;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG;YACvB,OAAO,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,4DAA8B,GAA9B,UAA+B,MAAgB,EAAE,UAAkB;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;YAC7B,OAAO,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2DAA6B,GAA7B,UAA8B,MAAgB,EAAE,UAAkB;QAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;YAC3B,OAAO,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,mCAAK,GAAL;QACI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAEL,0BAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,kDAAmB","file":"MetadataArgsStorage.js","sourcesContent":["import {SocketControllerMetadataArgs} from \"../metadata/args/SocketControllerMetadataArgs\";\r\nimport {ActionMetadataArgs} from \"../metadata/args/ActionMetadataArgs\";\r\nimport {ParamMetadataArgs} from \"../metadata/args/ParamMetadataArgs\";\r\nimport {MiddlewareMetadataArgs} from \"../metadata/args/MiddlewareMetadataArgs\";\r\nimport {ResultMetadataArgs} from \"../metadata/args/ResultMetadataArgs\";\r\nimport {UseMetadataArgs} from \"../metadata/args/UseMetadataArgs\";\r\n\r\n/**\r\n * Storage all metadatas read from decorators.\r\n */\r\nexport class MetadataArgsStorage {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    controllers: SocketControllerMetadataArgs[] = [];\r\n    middlewares: MiddlewareMetadataArgs[] = [];\r\n    uses: UseMetadataArgs[] = [];\r\n    actions: ActionMetadataArgs[] = [];\r\n    results: ResultMetadataArgs[] = [];\r\n    params: ParamMetadataArgs[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    findControllerMetadatasForClasses(classes: Function[]): SocketControllerMetadataArgs[] {\r\n        return this.controllers.filter(ctrl => {\r\n            return classes.filter(cls => ctrl.target === cls).length > 0;\r\n        });\r\n    }\r\n\r\n    findMiddlewareMetadatasForClasses(classes: Function[]): MiddlewareMetadataArgs[] {\r\n        return this.middlewares.filter(middleware => {\r\n            return classes.filter(cls => middleware.target === cls).length > 0;\r\n        });\r\n    }\r\n\r\n    findActionsWithTarget(target: Function): ActionMetadataArgs[] {\r\n        return this.actions.filter(action => action.target === target);\r\n    }\r\n\r\n    filterUsesWithTarget(target: Function): UseMetadataArgs[] {\r\n        return this.uses.filter(use => {\r\n            return use.target === target;\r\n        });\r\n    }\r\n\r\n    findResutlsWithTargetAndMethod(target: Function, methodName: string): ResultMetadataArgs[] {\r\n        return this.results.filter(result => {\r\n            return result.target === target && result.method === methodName;\r\n        });\r\n    }\r\n\r\n    findParamsWithTargetAndMethod(target: Function, methodName: string): ParamMetadataArgs[] {\r\n        return this.params.filter(param => {\r\n            return param.target === target && param.method === methodName;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all saved metadata.\r\n     */\r\n    reset() {\r\n        this.controllers = [];\r\n        this.middlewares = [];\r\n        this.actions = [];\r\n        this.params = [];\r\n    }\r\n\r\n}"],"sourceRoot":".."}
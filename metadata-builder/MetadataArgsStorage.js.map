{"version":3,"sources":["../../src/metadata-builder/MetadataArgsStorage.ts"],"names":[],"mappings":";;AAOA;;GAEG;AACH;IAAA;QAEI,4EAA4E;QAC5E,aAAa;QACb,4EAA4E;QAE5E,gBAAW,GAAmC,EAAE,CAAC;QACjD,gBAAW,GAA6B,EAAE,CAAC;QAC3C,SAAI,GAAsB,EAAE,CAAC;QAC7B,YAAO,GAAyB,EAAE,CAAC;QACnC,YAAO,GAAyB,EAAE,CAAC;QACnC,WAAM,GAAwB,EAAE,CAAC;IAkDrC,CAAC;IAhDG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,iCAAiC,CAAC,OAAmB;QACjD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAClC,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iCAAiC,CAAC,OAAmB;QACjD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACxC,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qBAAqB,CAAC,MAAgB;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,oBAAoB,CAAC,MAAgB;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC1B,OAAO,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAA8B,CAAC,MAAgB,EAAE,UAAkB;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAChC,OAAO,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAA6B,CAAC,MAAgB,EAAE,UAAkB;QAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,KAAK;QACD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;CAEJ;AA7DD,kDA6DC","file":"MetadataArgsStorage.js","sourcesContent":["import {SocketControllerMetadataArgs} from \"../metadata/args/SocketControllerMetadataArgs\";\nimport {ActionMetadataArgs} from \"../metadata/args/ActionMetadataArgs\";\nimport {ParamMetadataArgs} from \"../metadata/args/ParamMetadataArgs\";\nimport {MiddlewareMetadataArgs} from \"../metadata/args/MiddlewareMetadataArgs\";\nimport {ResultMetadataArgs} from \"../metadata/args/ResultMetadataArgs\";\nimport {UseMetadataArgs} from \"../metadata/args/UseMetadataArgs\";\n\n/**\n * Storage all metadatas read from decorators.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    controllers: SocketControllerMetadataArgs[] = [];\n    middlewares: MiddlewareMetadataArgs[] = [];\n    uses: UseMetadataArgs[] = [];\n    actions: ActionMetadataArgs[] = [];\n    results: ResultMetadataArgs[] = [];\n    params: ParamMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    findControllerMetadatasForClasses(classes: Function[]): SocketControllerMetadataArgs[] {\n        return this.controllers.filter(ctrl => {\n            return classes.filter(cls => ctrl.target === cls).length > 0;\n        });\n    }\n\n    findMiddlewareMetadatasForClasses(classes: Function[]): MiddlewareMetadataArgs[] {\n        return this.middlewares.filter(middleware => {\n            return classes.filter(cls => middleware.target === cls).length > 0;\n        });\n    }\n\n    findActionsWithTarget(target: Function): ActionMetadataArgs[] {\n        return this.actions.filter(action => action.target === target);\n    }\n\n    filterUsesWithTarget(target: Function): UseMetadataArgs[] {\n        return this.uses.filter(use => {\n            return use.target === target;\n        });\n    }\n\n    findResutlsWithTargetAndMethod(target: Function, methodName: string): ResultMetadataArgs[] {\n        return this.results.filter(result => {\n            return result.target === target && result.method === methodName;\n        });\n    }\n\n    findParamsWithTargetAndMethod(target: Function, methodName: string): ParamMetadataArgs[] {\n        return this.params.filter(param => {\n            return param.target === target && param.method === methodName;\n        });\n    }\n\n    /**\n     * Removes all saved metadata.\n     */\n    reset() {\n        this.controllers = [];\n        this.middlewares = [];\n        this.actions = [];\n        this.params = [];\n    }\n\n}"],"sourceRoot":".."}
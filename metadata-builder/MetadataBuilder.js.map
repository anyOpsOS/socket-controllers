{"version":3,"sources":["../../src/metadata-builder/MetadataBuilder.ts"],"names":[],"mappings":"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","file":"MetadataBuilder.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\r\nimport {ControllerMetadata} from \"../metadata/ControllerMetadata\";\r\nimport {ActionMetadata} from \"../metadata/ActionMetadata\";\r\nimport {ParamMetadata} from \"../metadata/ParamMetadata\";\r\nimport {MiddlewareMetadata} from \"../metadata/MiddlewareMetadata\";\r\nimport {ResultMetadata} from \"../metadata/ResultMetadata\";\r\nimport {UseMetadata} from \"../metadata/UseMetadata\";\r\n\r\n/**\r\n * Builds metadata from the given metadata arguments.\r\n */\r\nexport class MetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    buildControllerMetadata(classes?: Function[]) {\r\n        return this.createControllers(classes);\r\n    }\r\n\r\n    buildMiddlewareMetadata(classes?: Function[]) {\r\n        return this.createMiddlewares(classes);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private createMiddlewares(classes?: Function[]): MiddlewareMetadata[] {\r\n        const storage = defaultMetadataArgsStorage();\r\n        const middlewares = !classes ? storage.middlewares : storage.findMiddlewareMetadatasForClasses(classes);\r\n        return middlewares.map(middlewareArgs => {\r\n            return new MiddlewareMetadata(middlewareArgs);\r\n        });\r\n    }\r\n\r\n    private createControllers(classes?: Function[]): ControllerMetadata[] {\r\n        const storage = defaultMetadataArgsStorage();\r\n        const controllers = !classes ? storage.controllers : storage.findControllerMetadatasForClasses(classes);\r\n        return controllers.map(controllerArgs => {\r\n            const controller = new ControllerMetadata(controllerArgs);\r\n            controller.actions = this.createActions(controller);\r\n            controller.uses = this.createControllerUses(controller);\r\n            return controller;\r\n        });\r\n    }\r\n\r\n    private createActions(controller: ControllerMetadata): ActionMetadata[] {\r\n        return defaultMetadataArgsStorage()\r\n            .findActionsWithTarget(controller.target)\r\n            .map(actionArgs => {\r\n                const action = new ActionMetadata(controller, actionArgs);\r\n                action.params = this.createParams(action);\r\n                action.results = this.createResults(action);\r\n                return action;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Creates use metadatas for controllers.\r\n     */\r\n    protected createControllerUses(controller: ControllerMetadata): UseMetadata[] {\r\n        return defaultMetadataArgsStorage()\r\n            .filterUsesWithTarget(controller.target)\r\n            .map(useArgs => new UseMetadata(useArgs));\r\n    }\r\n\r\n    private createParams(action: ActionMetadata): ParamMetadata[] {\r\n        return defaultMetadataArgsStorage()\r\n            .findParamsWithTargetAndMethod(action.target, action.method)\r\n            .map(paramArgs => new ParamMetadata(action, paramArgs));\r\n    }\r\n\r\n    private createResults(action: ActionMetadata): ResultMetadata[] {\r\n        return defaultMetadataArgsStorage()\r\n            .findResutlsWithTargetAndMethod(action.target, action.method)\r\n            .map(resultArgs => new ResultMetadata(action, resultArgs));\r\n    }\r\n\r\n}"],"sourceRoot":".."}
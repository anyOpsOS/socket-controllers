{"version":3,"sources":["../../src/metadata-builder/MetadataBuilder.ts"],"names":[],"mappings":";;AAAA,oCAAoD;AACpD,uEAAkE;AAClE,+DAA0D;AAC1D,6DAAwD;AACxD,uEAAkE;AAClE,+DAA0D;AAE1D;;GAEG;AACH;IAEI,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,uBAAuB,CAAC,OAAoB;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,uBAAuB,CAAC,OAAoB;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAEpE,iBAAiB,CAAC,OAAoB;QAC1C,MAAM,OAAO,GAAG,kCAA0B,EAAE,CAAC;QAC7C,MAAM,WAAW,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;QACxG,OAAO,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YACpC,OAAO,IAAI,uCAAkB,CAAC,cAAc,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,iBAAiB,CAAC,OAAoB;QAC1C,MAAM,OAAO,GAAG,kCAA0B,EAAE,CAAC;QAC7C,MAAM,WAAW,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;QACxG,OAAO,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YACpC,MAAM,UAAU,GAAG,IAAI,uCAAkB,CAAC,cAAc,CAAC,CAAC;YAC1D,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACpD,OAAO,UAAU,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,aAAa,CAAC,UAA8B;QAChD,OAAO,kCAA0B,EAAE;aAC9B,qBAAqB,CAAC,UAAU,CAAC,MAAM,CAAC;aACxC,GAAG,CAAC,UAAU,CAAC,EAAE;YACd,MAAM,MAAM,GAAG,IAAI,+BAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5C,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,YAAY,CAAC,MAAsB;QACvC,OAAO,kCAA0B,EAAE;aAC9B,6BAA6B,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;aAC3D,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,6BAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,aAAa,CAAC,MAAsB;QACxC,OAAO,kCAA0B,EAAE;aAC9B,8BAA8B,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;aAC5D,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,+BAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;IACnE,CAAC;CAEJ;AA3DD,0CA2DC","file":"MetadataBuilder.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ControllerMetadata} from \"../metadata/ControllerMetadata\";\nimport {ActionMetadata} from \"../metadata/ActionMetadata\";\nimport {ParamMetadata} from \"../metadata/ParamMetadata\";\nimport {MiddlewareMetadata} from \"../metadata/MiddlewareMetadata\";\nimport {ResultMetadata} from \"../metadata/ResultMetadata\";\n\n/**\n * Builds metadata from the given metadata arguments.\n */\nexport class MetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    buildControllerMetadata(classes?: Function[]) {\n        return this.createControllers(classes);\n    }\n\n    buildMiddlewareMetadata(classes?: Function[]) {\n        return this.createMiddlewares(classes);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    \n    private createMiddlewares(classes?: Function[]): MiddlewareMetadata[] {\n        const storage = defaultMetadataArgsStorage();\n        const middlewares = !classes ? storage.middlewares : storage.findMiddlewareMetadatasForClasses(classes);\n        return middlewares.map(middlewareArgs => {\n            return new MiddlewareMetadata(middlewareArgs);\n        });\n    }\n\n    private createControllers(classes?: Function[]): ControllerMetadata[] {\n        const storage = defaultMetadataArgsStorage();\n        const controllers = !classes ? storage.controllers : storage.findControllerMetadatasForClasses(classes);\n        return controllers.map(controllerArgs => {\n            const controller = new ControllerMetadata(controllerArgs);\n            controller.actions = this.createActions(controller);\n            return controller;\n        });\n    }\n    \n    private createActions(controller: ControllerMetadata): ActionMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findActionsWithTarget(controller.target)\n            .map(actionArgs => {\n                const action = new ActionMetadata(controller, actionArgs);\n                action.params = this.createParams(action);\n                action.results = this.createResults(action);\n                return action;\n            });\n    }\n    \n    private createParams(action: ActionMetadata): ParamMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findParamsWithTargetAndMethod(action.target, action.method)\n            .map(paramArgs => new ParamMetadata(action, paramArgs));\n    }\n\n    private createResults(action: ActionMetadata): ResultMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findResutlsWithTargetAndMethod(action.target, action.method)\n            .map(resultArgs => new ResultMetadata(action, resultArgs));\n    }\n\n}"],"sourceRoot":".."}